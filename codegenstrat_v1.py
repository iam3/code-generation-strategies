# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qSsu00RTveadLdrK2IUw_MXmUI5iuRQe
"""

# =============================================================
# 📦 0. Install + login
# =============================================================
!pip -q install datasets sentence-transformers scikit-learn tqdm huggingface_hub

from huggingface_hub import notebook_login
notebook_login()           # paste your HF write‑token when prompted

# =============================================================
# 1. Imports & config
# =============================================================
from datasets import load_dataset, Dataset, DatasetDict, concatenate_datasets
from sentence_transformers import SentenceTransformer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, ConfusionMatrixDisplay
import numpy as np, pandas as pd, matplotlib.pyplot as plt, re, random, joblib
from tqdm.auto import tqdm
import os, json, textwrap

# =============================================================
# 2. Load & merge datasets  (~100 k prompts total)
# =============================================================
!pip install --upgrade datasets

print("⬇️ Loading CodeXGLUE …")
from datasets import load_dataset
SEED = 42
random.seed(SEED); np.random.seed(SEED)


ct     = load_dataset("code_x_glue_ct_code_to_text", "python", split="train[:1000]") # ~20 k
tc     = load_dataset("code_x_glue_tc_text_to_code", split="train[:1000]")    # ~21 k
refine = load_dataset("code_x_glue_cc_code_refinement", "medium", split="train[:1000]") # ~90 k (Java bug‑fix)

print("⬇️ Loading design‑pattern prompts from HF Hub …")
HF_DESIGN_PROMPTS = "ireneom3/design-pattern-prompts"   # design pattern prompts dataset
dp     = load_dataset(HF_DESIGN_PROMPTS, split="train[:1000]")                                # ~3 k

def to_prompts(ds, field, tag):
    return [
        {"id": f"{tag}_{i}", "prompt": ex[field].strip()}
        for i, ex in enumerate(ds)
        if ex.get(field) and len(ex[field].strip()) >= 8
    ]

prompts = (
      to_prompts(ct, "docstring", "ct")
    + to_prompts(tc, "nl",        "tc")
    + [{"id": f"ref_{i}", "prompt": f"Fix the following buggy function:\n{ex['buggy'][:120]}…"}
       for i, ex in enumerate(refine)]
    + to_prompts(dp, "prompt",    "dp")
)

assert isinstance(refine, list) or hasattr(refine, "features")  # make sure it's a single split
train_data = Dataset.from_list(prompts)
print("🟢 total merged prompts:", len(train_data))

# =============================================================
# 3. Heuristic labeling  (10 strategy classes)
# =============================================================
import re
import pandas as pd

# Strategy labels
STRATEGIES = [
    "Direct", "Planner→Coder", "Reflection Loop", "Design Pattern",
    "Bug Fix", "Refactor", "Data‑Pipeline", "Doc‑Generator",
    "Complex‑Algo", "Integration‑Test"
]

# Refined rule-based matching patterns
pattern_rules = {
    "Reflection Loop": r"\b(fix|debug|error|fail|issue|retry)\b",
    "Design Pattern" : r"\b(class|pattern|strategy|singleton|factory|observer|adapter|template method|decorator|plugin|architecture)\b",
    "Planner→Coder"  : r"\b(plan|first.*then|steps?|procedure|sequence|workflow|flow)\b",
    "Bug Fix"        : r"\b(bug|defect|wrong output|incorrect result|crash)\b",
    "Refactor"       : r"\b(refactor|clean up|rename|improve readability|restructure|simplify)\b",
    "Data‑Pipeline"  : r"\b(load|parse|csv|json|data file|data pipeline|etl|extract|transform|ingest|schema)\b",
    "Doc‑Generator"  : r"\b(docstring|generate docs|documentation|api docs|readme)\b",
    "Complex‑Algo"   : r"\b(dynamic programming|graph|shortest path|dijkstra|astar|recursive|dp table|backtracking|greedy|bfs|dfs)\b",
    "Integration‑Test": r"\b(integration test|end[- ]to[- ]end|e2e|simulate|test harness|system test|full stack)\b"
}

# Fallback check for likely 'Direct' prompts (short + not architectural)
fallback_direct = re.compile(r"\b(class|pattern|plan|step|design|component|interface)\b")

# Heuristic label assignment function
def heuristic(prompt: str):
    p = prompt.lower()
    hits = set()

    # Fast fallback for very short prompts with no architecture hints
    if len(p.split()) < 12 and not fallback_direct.search(p):
        return "Direct"

    # Match against rules
    for label, regex in pattern_rules.items():
        if re.search(regex, p):
            hits.add(label)

    # Return label logic
    if len(hits) == 0:
        return "Direct"
    elif len(hits) == 1:
        return next(iter(hits))
    else:
        return ";".join(sorted(hits))

# Apply to your dataset
train_data = train_data.map(lambda ex: {"label": heuristic(ex["prompt"])})
print(pd.Series(train_data["label"]).value_counts())

# =============================================================
# 4. Embedding extraction  (Sentence‑BERT)
# =============================================================
embedder = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embedder.encode(list(train_data["prompt"]), batch_size=64, show_progress_bar=True)

# =============================================================
# 5. Train / test split + classifier
# =============================================================

# Get value counts of labels
label_counts = pd.Series(train_data["label"]).value_counts()

# Identify labels with only one occurrence
single_occurrence_labels = label_counts[label_counts == 1].index.tolist()

# Filter out data points with single occurrence labels
filtered_indices = [i for i, label in enumerate(train_data["label"]) if label not in single_occurrence_labels]
filtered_embeddings = embeddings[filtered_indices]
filtered_labels = [train_data["label"][i] for i in filtered_indices]


X_train, X_test, y_train, y_test = train_test_split(
    filtered_embeddings, filtered_labels,
    test_size=0.25, stratify=filtered_labels, random_state=SEED)

clf = LogisticRegression(max_iter=2000, multi_class="multinomial", n_jobs=-1, random_state=SEED)
clf.fit(X_train, y_train)

print(classification_report(y_test, clf.predict(X_test)))

_, ax = plt.subplots(figsize=(12, 12))
ConfusionMatrixDisplay.from_estimator(
    clf, X_test, y_test, ax=ax, cmap="Blues", xticks_rotation=45
)
# Wrap semicolons to newlines + tweak font
ax.set_xticklabels([t.get_text().replace(";", "\n") for t in ax.get_xticklabels()],
                   ha="right", fontsize=8)
ax.set_yticklabels([t.get_text().replace(";", "\n") for t in ax.get_yticklabels()],
                   fontsize=8)
plt.tight_layout()
plt.show()

# =============================================================
# 6. Save artifacts locally
# =============================================================
train_data.save_to_disk("merged_strategy_dataset")
joblib.dump(clf, "strategy_selector_lr.joblib")
np.save("sbert_embeddings.npy", embeddings)
print("✅ saved dataset + model to local files")

# =============================================================
# 7. (Optional) Push labeled dataset back to HF Hub
# =============================================================
PUSH_DATASET = False     # set True if you want to upload

if PUSH_DATASET:
    train_data.push_to_hub("your-username/merged-strategy-dataset")
    print("🚀 uploaded to HF Hub!")